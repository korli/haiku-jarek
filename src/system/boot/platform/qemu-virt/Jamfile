SubDir HAIKU_TOP src system boot platform qemu-virt ;

SubDirHdrs $(HAIKU_TOP) headers private kernel boot platform $(TARGET_BOOT_PLATFORM) ;
SubDirHdrs $(HAIKU_TOP) headers private kernel platform $(TARGET_BOOT_PLATFORM) ;
SubDirHdrs $(HAIKU_TOP) src system boot arch $(TARGET_KERNEL_ARCH) ;

UsePrivateHeaders [ FDirName kernel disk_device_manager ] ;
UsePrivateHeaders [ FDirName graphics common ] ;
UsePrivateHeaders [ FDirName graphics vesa ] ;
UsePrivateHeaders [ FDirName storage ] ;
UsePrivateHeaders [ FDirName kernel arch generic ] ;

{
	local defines = _BOOT_MODE ;

	defines = [ FDefines $(defines) ] ;
	SubDirCcFlags $(defines) ;
	SubDirC++Flags $(defines) -fno-rtti ;
}

SEARCH_SOURCE += [ FDirName $(HAIKU_TOP) src add-ons accelerants common ] ;
SEARCH_SOURCE += [ FDirName $(HAIKU_TOP) src system kernel bsp fdt ] ;
SEARCH_SOURCE += [ FDirName $(HAIKU_TOP) src system kernel bsp fdt libfdt ] ;

SubDirSysHdrs [ FDirName $(HAIKU_TOP) src system kernel bsp fdt ] ;
SubDirSysHdrs [ FDirName $(HAIKU_TOP) src system kernel bsp fdt libfdt ] ;

local libFdtSources =
	fdt_addresses.c
	fdt_ro.c
	fdt.c
;

# First build the non arch dependent parts
BootMergeObject boot_platform_qemu-virt_common.o :
	$(libFdtSources)
	fdt_support.cpp
	debug.cpp
	console.cpp
	devices.cpp
	menu.cpp
	start.cpp
	video.cpp
	: -fno-rtti -g -O0
	: boot_platform_generic.a
;

BootMergeObject boot_platform_qemu-virt.o :
	: 
	:
	# must come first to have _start_* at correct locations
	boot_platform_qemu-virt_common.o
	boot_platform_qemu-virt_$(TARGET_ARCH).o
;

SubInclude HAIKU_TOP src system boot platform qemu-virt arch ;
